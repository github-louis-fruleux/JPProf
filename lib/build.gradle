import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'

    id "com.github.johnrengelman.shadow" version "7.1.2"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def jpprofVersion = project.properties['jpprof_version']


repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation files('async-profiler-2.8.3/async-profiler.jar')
    implementation files('async-profiler-2.8.3/converter.jar')
}

tasks.withType(Test) {
    systemProperty "java.library.path",  "$projectDir/lib/natives/"
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

shadowJar {
    exclude '**.html'

    from("async-profiler-2.8.3") {
        include "**.so"
        into "async-profiler-libs"
    }

    archiveBaseName.set('jpprof')
    archiveClassifier.set('')
    archiveVersion.set(jpprofVersion)

    minimize()
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "jpprof"
}
tasks.shadowJar.dependsOn tasks.relocateShadowJar

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            groupId = 'com.grafana'
            artifactId = 'jpprof'
            version = jpprofVersion
            artifacts = [ shadowJar, javadocJar, sourcesJar ]
            pom {
                name = 'Java PProf'
                description = 'Go Pprof but for Java runtime.'
                url = 'https://grafana.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'ctovena'
                        name = 'Cyril Tovena'
                        email = 'cyril.tovena@grafana.com'
                    }
                    developer {
                        id = 'cristiangreco'
                        name = 'Cristian Greco'
                        email = 'cristian.greco@grafana.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/grafana/jpprof.git'
                    developerConnection = 'scm:git:ssh://github.com/grafana/jpprof.git'
                    url = 'https://github.com/grafana/jpprof'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.hasProperty('nexusUsername') ? project.nexusUsername : ''
                password project.hasProperty('nexusPassword') ? project.nexusPassword : ''
            }
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        }
    }
}

signing {
    def signingKey = project.findProperty("signingKey")
    def signingPassword = project.findProperty("signingPassword")

    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.shadow
}
